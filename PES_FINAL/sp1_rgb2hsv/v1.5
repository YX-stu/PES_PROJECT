library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library axi_filter_dma_v1_00_a;
use axi_filter_dma_v1_00_a.all;

--! This component realizes the conversion from RGB to HSV color space.

--! The component can take one color pixel per clock cycle as input.
--! The HSV calculation is pipelined and may take a several clock cycles.
--! The result_rdy output indicates, if the outputs hold a valid computation result.
--! The pixels are processed using the FIFO principle.
entity rgb2hsv is
    port (

        clk        : in  std_logic;   --! Clock input
        rstn       : in  std_logic;   --! Negated asynchronous reset
        data_rdy   : in  std_logic;   --! Input bit indicating if the input data (#r, #g, #b) is ready to be processed
        r          : in  std_logic_vector(7 downto 0);  --! 8 bit red component of the input pixel
        g          : in  std_logic_vector(7 downto 0);  --! 8 bit green component of the input pixel
        b          : in  std_logic_vector(7 downto 0);  --! 8 bit blue component of the input pixel
        result_rdy : out std_logic;       --! Indicates whether the outputs (#h, #s, #v) represent valid pixel data
        h          : out std_logic_vector(8 downto 0);    --! 9 bit hue component of the output pixel (Range: 0Â° - 360Â°)
        s          : out std_logic_vector(7 downto 0);    --! 8 bit saturation component of the output pixel
        v          : out std_logic_vector(7 downto 0)     --! 8 bit value component of the output pixel
    );
end entity rgb2hsv;

--! rtl implementation of rgb2hsv
architecture rtl of rgb2hsv is

    --! returns the maximum value of the three given parameters
    function max3(a : unsigned; b : unsigned; c : unsigned) return unsigned is
        variable result : unsigned(7 downto 0) := "00000000";
    begin
        if a > b then
            result := a;
        else
            result := b;
        end if;
        if c > result then
            result := c;
        end if;
        return result;
    end function max3;

    --! returns the minimum value of the three given parameters
    function min3(a : unsigned; b : unsigned; c : unsigned) return unsigned is
        variable result : unsigned(7 downto 0) := "11111111";
    begin
        -- STUDENT CODE HERE
		if a < b then
            result := a;
        else
            result := b;
        end if;
        if c < result then
            result := c;
        end if;
        return result;
        -- STUDENT CODE until HERE
    end function min3;
    
    --! left shifting to realize multiplication 60*
    function mul_60(a : unsigned; b : unsigned) return signed is
        variable result : signed(16 downto 0) := (others=> '0');
    begin
        -- STUDENT CODE HERE
        -- converts to signed with 17 bits
        result := to_signed(to_integer(a) - to_integer(b), 17);
        -- multiplication with 60
        -- left shift 6 times (*64) and subtract its left shifting with 2 times (*4)
        -- 64*result - 4*result = 60*result
        result := shift_left(result,6) - shift_left(result,2);
        return result;
        -- STUDENT CODE until HERE
    end function mul_60;
    
    --! left shifting to realize multiplication 255*
    function mul_255(a : unsigned; b : unsigned) return signed is
        variable result : signed(16 downto 0) := (others=> '0');
    begin
        -- STUDENT CODE HERE
        -- converts to signed with 17 bits
        result := to_signed(to_integer(a) - to_integer(b), 17);
        -- multiplication with 60
        -- left shift 8 times (*256) and subtract selfs (*1)
        -- 256*result - 1*result = 255*result
        result := shift_left(result,8) - result;
        return result;
        -- STUDENT CODE until HERE
    end function mul_255;
    

    type u8_array_t is array(natural range <>) of unsigned(7 downto 0);
    type u16_array_t is array(natural range <>) of signed(15 downto 0);
    type u10_array_t is array(natural range <>) of unsigned(9 downto 0);

    component div16_8_8 is
    port (
        clk        : in  std_logic;
		en         : in  STD_LOGIC;
        rstn       : in  std_logic;
        a          : in  std_logic_vector(16 downto 0);
        b          : in  std_logic_vector( 7 downto 0);
        result     : out std_logic_vector( 8 downto 0)
    );
    end component;

    -- STUDENT CODE HERE
--    -- max,min signal
--    signal max: unsigned(7 downto 0);
--    signal min: unsigned(7 downto 0);
    -- enable signal for divider
    signal en : std_logic := '0'; 
    
    -- signal for a and b ports (hue)
    signal h_divided : std_logic_vector(16 downto 0);
    signal h_divisor : std_logic_vector(7 downto 0);
    -- signal for a and b ports (saturation)
    signal s_divided : std_logic_vector(16 downto 0);
    signal s_divisor : std_logic_vector(7 downto 0);
    -- signal for value
--    signal v_divided : std_logic_vector(16 downto 0);
--    signal v_divisor : std_logic_vector(7 downto 0);
    
    -- result of divider for hue
    signal h_result : std_logic_vector(8 downto 0);
    -- result of divider for saturation
    signal s_result : std_logic_vector(8 downto 0);
    -- result of value
    signal v_result : u8_array_t(10 downto 0) := (others=>(others=>'0')); 
    
    -- condition array for hue calculation
    signal h_condition : u10_array_t(2 downto 0) := (others=>(others=>'0'));
    -- delay the condition to synchronize other dividers
    signal h_cal_con : std_logic_vector(2 downto 0) := (others=>'0');
    
    -- flag for the appearing of result of divider
    signal r_en : unsigned(9 downto 0);
    -- flag for the end of conversion
    signal r_end : unsigned(9 downto 0); 
    -- flag for the end of shifting
    signal r_shift : unsigned(10 downto 0);
    -- flag for the shifting
    signal h_shift : unsigned(1 downto 0) := (others=>'0');
    -- controll the result_rdy
    signal r_res : std_logic := '0';

    -- STUDENT CODE until HERE

begin

    -- STUDENT CODE HERE
    div_16_instance_h : div16_8_8
        port map(clk  => clk,
                 en   => en,
                 rstn => rstn,
                 a    => h_divided,
                 b    => h_divisor,
                 result => h_result);
                 
    div_16_instance_s : div16_8_8
        port map(clk  => clk,
                 en   => en,
                 rstn => rstn,
                 a    => s_divided,
                 b    => s_divisor,
                 result => s_result);
    
    rgb2hsv: process(rstn, clk, data_rdy)
        -- results fo function of max3 and min3
        variable max, min : unsigned(7 downto 0); 
        -- real result of hue
        variable hue : signed(8 downto 0); 
        variable uhue : unsigned(8 downto 0); 
        -- condition array for hue calculation
        variable v_h_condition : u10_array_t(2 downto 0) := (others=>(others=>'0'));
        -- flag for the data input again
        variable r_op : integer := 0;
        -- flag for the result_rdy again
        variable r_rdy : integer := 0;
        -- flag for the en off
        variable en_off : integer := 0;

    begin
        if rstn = '0' then
            h <= (others => '0');
            s <= (others => '0');
            v <= (others => '0');
            result_rdy <= '0';
            r_en <= (others => '0');
            r_end <= (others => '0');
            r_shift <= (others => '0');
        elsif rising_edge(clk) then
            
--            if h_shift = '1' then
--                -- No matter how the conditions change, the array shifts left by one bit per round       
--                v_h_condition(0) := shift_left(h_condition(0),1); 
--                v_h_condition(1) := shift_left(h_condition(1),1); 
--                v_h_condition(2) := shift_left(h_condition(2),1); 
--                -- read the last condition array after shifting      
--                h_condition(0) <= v_h_condition(0);
--                h_condition(1) <= v_h_condition(1);
--                h_condition(2) <= v_h_condition(2);   
--            end if;    
            if data_rdy = '1' then
                h_shift <= "00";
            end if;           
            -- conversion to hsv, controlled by data_rdy
            if data_rdy = '1' or h_shift = 1 then
                -- start the divider
                en <= '1';
                r_end <= (others => '0');
                r_shift <= (others => '0');
                en_off := 0;
                -- max, min,of rgb
                max := max3(unsigned(r), unsigned(g), unsigned(b));
                min := min3(unsigned(r), unsigned(g), unsigned(b));
                
                -- divider part of hue
                -- No matter how the conditions change, the array shifts left by one bit per round       
                v_h_condition(0) := shift_left(h_condition(0),1); 
                v_h_condition(1) := shift_left(h_condition(1),1); 
                v_h_condition(2) := shift_left(h_condition(2),1); 
                -- read the last condition array after shifting      
                h_condition(0) <= v_h_condition(0);
                h_condition(1) <= v_h_condition(1);
                h_condition(2) <= v_h_condition(2);   
                if max = unsigned(r) and max /= min then
                    h_divided <= std_logic_vector(mul_60(unsigned(g), unsigned(b)));
                    h_divisor <= std_logic_vector(max - min);
                    h_condition(0) <= v_h_condition(0) + 1;
                elsif max = unsigned(g) and max /= min then
                    h_divided <= std_logic_vector(mul_60(unsigned(b), unsigned(r))); 
                    h_divisor <= std_logic_vector(max - min);
                    h_condition(1) <= v_h_condition(1) + 1;
                elsif max = unsigned(b) and max /= min then
                    h_divided <= std_logic_vector(mul_60(unsigned(r), unsigned(g))); 
                    h_divisor <= std_logic_vector(max - min);
                    h_condition(2) <= v_h_condition(2) + 1;
                elsif max = min then
                    -- default result is 0
                    h_divided <= std_logic_vector(to_signed(0,17)); 
                    h_divisor <= std_logic_vector(to_signed(1,8));
                end if;
                
                -- divider part of saturation (need to convert from 1 to 255)
                if max = 0 then
                    s_divided <= std_logic_vector(to_signed(0,17));
                    s_divisor <= std_logic_vector(to_signed(1,8));
                else
                    s_divided <= std_logic_vector(mul_255(max,min)); 
                    s_divisor <= std_logic_vector(max);
                end if;
                
                -- pipeline part of value (must be max)
                v_result(0) <= max;
                for i in 0 to 9 loop
                    v_result(i+1) <= v_result(i);
                end loop;
            end if;
            

            -- calculation of hue
            h_cal_con(0) <= h_condition(0)(9);
            h_cal_con(1) <= h_condition(1)(9);
            h_cal_con(2) <= h_condition(2)(9);
            
            if h_cal_con(0) = '1' then
                hue := signed(h_result);
                uhue := unsigned(hue);
            elsif h_cal_con(1) = '1' then
                hue := signed(h_result) + 120;
                uhue := unsigned(hue);
            elsif h_cal_con(2) = '1' then
                if to_integer(signed(h_result)) + 240 > 255 then
                    uhue := to_unsigned((to_integer(signed(h_result)) + 240),9);
                    -- make sure it is not negative
                    hue := to_signed(240,9);
                else
                    hue := signed(h_result) + 240;
                    uhue := unsigned(hue);
                end if;
            else
                hue := signed(h_result);
                uhue := unsigned(hue);
            end if;
            -- determine if hue is negative
            case(hue < 0) is
                when true =>
                    uhue := unsigned(hue + 360);
                    h <= std_logic_vector(uhue);
                when false =>
                    h <= std_logic_vector(uhue);
            end case;

            -- calculation of saturation
            s <= s_result(7 downto 0);
            
            -- caculation of value
            v <= std_logic_vector(v_result(10));
            
            -- after 9 clock cycles the conversion result is ready, when there are input pixels
            if en = '1' and r_en /= 1023 then
                r_en <= shift_left(r_en,1) + 1;
            end if;
            if r_en = 1023 or r_res = '1' then
                result_rdy <= en;
                r_res <= '1';
                r_en <= (others => '0');
            end if;
            
            -- determine the stop condition
            -- conversion paused, when there exists an interrupt
            if data_rdy = '0' and r_end < 511 and h_shift = 0 then
                r_end <= shift_left(r_end,1) + 1;
                en <= '0';
                result_rdy <= en;
            end if;
            
            if r_end = 1023 then
                if data_rdy = '0' then
                    r_rdy := r_rdy + 1;
                end if;
            end if;
            -- again result_rdy
            if data_rdy = '1' and r_rdy >= 0 and en_off = 2 then 
                r_rdy := r_rdy - 1;
            end if;
            
            if r_rdy = -1 then
                r_op := 0;
                r_rdy := 0;
                r_res <= '1';
            end if;
               
            -- conversion end, when there are not input pixels anymore
            -- wait for 9 clock cycle(pipeline length), if ther are not input pixels, then the conversion is end
            if r_end = 511 then
                h_shift <= "01";
                r_op := 1;
                en_off := 1;
            end if;

            if h_shift = 1 then
               r_shift <= shift_left(r_shift,1) + 1;
            end if;
            if r_shift = 2047 and en_off = 1 then
                en <= '0';
                en_off := 2;
            end if;
            if r_shift = 2047 and r_op = 1 then
                h_shift <= "10";
                result_rdy <= '0';
                r_res <= '0';
--                r_shift <= (others=> '0');
            end if;
        end if;
    end process;
    -- STUDENT CODE until HERE

end architecture rtl;
